implement global variable.
--
implement pointer.

tokenize: '*', '&'
parse:
  VAR_DEF:
    int *y
  FUNC_DEF: params
    int *y
  TERM/POINTER/DEREFERENCE
  
codegen:

--
parse phase: entry variable
--
9cc.h
parse.c
  func_def()
  var_def()
codegen.c
  gen_lval()
  gen()
    ND_FUNC_DEF
      sym_tab = map_sym_tab->children(

--
1. create a test case.
2. implement.
3. pass the test case.

---
test case 1: compile capable
reiwa0.c
---
test case 2: bar():expect().
reiwa1.c
--
9cc.h
SYM_TAB *sym_tab_root;
SYM_TAB *sym_tab;
int var_cnt; // TODO: delete

typedef struct SYM_TAB SYM_TAB;
struct SYM_TAB {
  SYM_TAB *parent;
  char *func_name; // use?
  int var_cnt;
  Map *body;
};

typedef struct {
  int token; // for reserved word
  int type;   
  int addr;
} SYM_REC;
--
main.c(instead of codegen.c)
  global sym_tab
  SYM_TAB *sym_tab = malloc(sizeof(SYM_TAB));
  sym_tab->parent = NULL;
init.c
  entry_reserved(sym_name, token);
tokenize.c
  query_reserved(token-name)
gen()
  case ND_FUNC_DEF:
    begining of func.
      sym_tab = append_sym_tab(func_name);
    end of func.
      sym_tab = sym_tab->parent;
  case ND_COMP_STMT:
  case ND_FOR_STMT:
  case ND_WHILE_STMT:
    TODO: append_sym_tab(NULL);
  case ND_VAR_DEF:
    make an entry variable with var_tab.
    - entry_var(var_name, type)
gen_lval()
  search variable from var_tab, if it is not found return error.
  - query_var(var_name)

implement function.
  - append_sym_tab(func_name);
  - entry_reserved(sym_name, token);
  - entry_var(var_name, type);
  - SYM_REC *query_var(var_name);
  - SYM_REC *query_reserved(sym_name) {
      return query(NULL, sym_name);
    }
--    
-e のときは暗に main() の中にあると考えて解釈している。

$ ulimit -Sc unlimited

rename 
var_tab -> symtab

compound_stmt の実装ってこれでよかったかなぁ。

演算子の結合と優先度をチェックする。

左結合: * /
左結合: + -
右結合: =
==, !=

--
while ( cond )
  break;
--
for (;;)
  break;
--
do
  break;
while (cond);
--
switch (cond) {
case 0:
break;
}
--
main() {
  func();       
}

func() {
}

sudo apt-get install graphviz electric-fence

$ gdb --args ./9cc test/test.c
