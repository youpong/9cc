step19 sizeof
step18 pointer arithmetic(+/-)
step17 ポインタ型を導入する
--
ND_DEREFERENCE 周りの実装をもう一度見直そう
*(ptr + 1) が利用できるようにしよう！

branch master に行われた変更を dev に反映する手順を調べる。
--
main()
1. init()
2. tokenize() - tokenize
3. parse() - parse
4. sema() - semantic analyze
5. gen_x86() - generate code
--
node->ty == ND_IDENT | ND_NUM において node->c_ty を正しく設定する。
それは parse phase ? semantic analyse phase ? codegen phase の前。
--

--
branch
 - master dev で十分に実現できた（テストできた) 機能を取り込むブランチ。テストをパスすること。
 - dev 開発するためのブランチ。コンパイルはできること。
--
implement pointer operation
test/step18.c
int i, *p, *q;
q = p + 2;
q = p + i;
+ のオペランドに pointer 型が含まれている。そのとき、もう一つのオペランドが
int 型であれば * sizeof(void *) を行う。

sema() --> q = p + ( 2 * sizeof(void *))
       --> q = p + ( i * sizeof(void *))
--

implement global variable.
--
1. create a test case.
2. implement.
3. pass the test case.
--    
-e のときは暗に main() の中にあると考えて解釈している。

$ ulimit -Sc unlimited

rename 
var_tab -> symtab

compound_stmt の実装ってこれでよかったかなぁ。

演算子の結合と優先度をチェックする。

左結合: * /
左結合: + -
右結合: =
==, !=

--
while ( cond )
  break;
--
for (;;)
  break;
--
do
  break;
while (cond);
--
switch (cond) {
case 0:
break;
}
--
sudo apt-get install graphviz electric-fence

$ gdb --args ./9cc test/test.c
